// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos com o sistema Zanai
  agents    Agent[]
  workspaces Workspace[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelos para o sistema Zanai
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  config      String   // JSON com configuração do workspace
  vscodeContext String? // JSON com contexto do VS Code
  lastSyncedAt DateTime? // Última sincronização com VS Code
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  agents      Agent[]
  compositions Composition[]
  
  @@index([userId])
}

model Agent {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // 'template', 'custom', 'composed'
  config      String   // YAML com configuração do agente
  knowledge   String?  // Markdown com conhecimento do agente
  templateId  String?  // ID do template se baseado em template
  status      String   @default("active") // 'active', 'inactive', 'training'
  workspaceId String
  userId      String?  // Opcional para agentes compartilhados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  compositions Composition[]
  learnings   Learning[]
  executions  AgentExecution[]
  
  @@index([workspaceId])
  @@index([userId])
}

model Composition {
  id          String   @id @default(cuid())
  name        String
  description String?
  config      String   // YAML com configuração da composição
  status      String   @default("draft") // 'draft', 'active', 'archived'
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  agents      Agent[]
  
  @@index([workspaceId])
}

model Learning {
  id          String   @id @default(cuid())
  agentId     String
  type        String   // 'feedback', 'pattern', 'adaptation'
  data        String   // JSON com dados de aprendizado
  confidence  Float    @default(0.0)
  createdAt   DateTime @default(now())
  
  agent       Agent    @relation(fields: [agentId], references: [id])
  
  @@index([agentId])
}

model AgentExecution {
  id           String   @id @default(cuid())
  agentId      String
  input        String
  output       String?
  status       String   @default("pending") // 'pending', 'running', 'completed', 'failed'
  context      String?  // JSON com contexto adicional
  vscodeContext String? // JSON com contexto do VS Code durante execução
  result       String?  // JSON com resultado detalhado
  error        String?  // Mensagem de erro se falhou
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  
  agent        Agent    @relation(fields: [agentId], references: [id])
  
  @@index([agentId])
  @@index([status])
}